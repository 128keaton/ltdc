{$G+}
{$E+}
{$F+}


uses crt,GraphAsm,_KeybAsm;


const
  NB_SPRITES=1;
  HeroSpr_LARG=14;
  HeroSpr_HAUT=22;
  SolSpr_LARG=28;
  SolSpr_HAUT=13;
  MurSpr_LARG=14;
  MurSpr_HAUT=30;
  LevelLarg=100;
  LevelHaut=100;

  LEVEL1: array [1..LevelLarg,1..LevelHaut] of word=
  ((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,1,1,1,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,1,100,1,0,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,1,1,1,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,6,6,6,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,6,6,6,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,6,6,6,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,6,6,6,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));


type
	Hero= 0..3;
var
	Decort: array [1..255] of PByte;
	Tmp,ImF,Fond,Titre,ImPerso,Perso1,Perso2,Perso3,perso4: PByte;
  EcranVirtuel: PByte;
	H0X,H0Y,H1X,H1Y,ChxPersp,PtX,PtY,i,j,k,Color: byte;
	a,b,c: integer;
	Rest: boolean;
	Pal: TPalette;
	SpySprt: array [0..3,0..7] of PByte;
	Direct: 0..7;
	ChxHero: hero;
var
  ClipX1,ClipY1,ClipX2,ClipY2:integer;


procedure CreerImageSprite;
var
	image: Pbyte;
	palette: TPalette;
begin
(************************   I N I T   P E R S O   ***************************)
	ChargePCX('spywar.drw',image,palette);
  for i:=0 to 3 do
  	for j:=0 to 7 do
	    GetMem(SpySprt[i,j],HeroSpr_LARG*HeroSpr_HAUT);
  GetSprite(image,001,25,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,0]);
  GetSprite(image,016,25,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,1]);
  GetSprite(image,031,25,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,2]);
  GetSprite(image,046,25,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,3]);
  GetSprite(image,061,25,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,4]);
  GetSprite(image,076,25,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,5]);
  GetSprite(image,091,25,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,6]);
  GetSprite(image,106,25,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,7]);
  GetSprite(image,001,01,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,0]);
  GetSprite(image,016,01,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,1]);
  GetSprite(image,031,01,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,2]);
  GetSprite(image,046,01,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,3]);
  GetSprite(image,061,01,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,4]);
  GetSprite(image,076,01,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,5]);
  GetSprite(image,091,01,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,6]);
  GetSprite(image,106,01,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,7]);
  freemem(image,64000);

(*************************   I N I T   D E C O   ****************************)
  ChargePCX('decors01.pcx',image,palette);
 	for i:=1 to 10 do
    GetMem(Decort[i],SolSpr_LARG*SolSpr_HAUT);
  GetSprite(image,1,33,SolSpr_LARG,SolSpr_HAUT,Decort[1]);
  GetSprite(image,31,33,SolSpr_LARG,SolSpr_HAUT,Decort[2]);
  GetSprite(image,61,33,SolSpr_LARG,SolSpr_HAUT,Decort[3]);
	GetSprite(image,91,33,SolSpr_LARG,SolSpr_HAUT,Decort[4]);
	GetSprite(image,121,33,SolSpr_LARG,SolSpr_HAUT,Decort[5]);
	GetSprite(image,151,33,SolSpr_LARG,SolSpr_HAUT,Decort[6]);

 	for i:=100 to 113 do
	  GetMem(Decort[i],MurSpr_LARG*MurSpr_HAUT);
  GetSprite(image,001,1,MurSpr_LARG,MurSpr_HAUT,Decort[100]);
  GetSprite(image,209,1,MurSpr_LARG,MurSpr_HAUT,Decort[101]);
  GetSprite(image,017,1,MurSpr_LARG,MurSpr_HAUT,Decort[102]);
  GetSprite(image,193,1,MurSpr_LARG,MurSpr_HAUT,Decort[103]);
  GetSprite(image,033,1,MurSpr_LARG,MurSpr_HAUT,Decort[104]);
  GetSprite(image,177,1,MurSpr_LARG,MurSpr_HAUT,Decort[105]);
  GetSprite(image,049,1,MurSpr_LARG,MurSpr_HAUT,Decort[106]);
  GetSprite(image,161,1,MurSpr_LARG,MurSpr_HAUT,Decort[107]);
  GetSprite(image,065,1,MurSpr_LARG,MurSpr_HAUT,Decort[108]);
  GetSprite(image,145,1,MurSpr_LARG,MurSpr_HAUT,Decort[109]);
  GetSprite(image,081,1,MurSpr_LARG,MurSpr_HAUT,Decort[110]);
  GetSprite(image,129,1,MurSpr_LARG,MurSpr_HAUT,Decort[111]);
  GetSprite(image,097,1,MurSpr_LARG,MurSpr_HAUT,Decort[112]);
  GetSprite(image,113,1,MurSpr_LARG,MurSpr_HAUT,Decort[113]);
  freemem(image,64000);
end;


procedure SetClipZone(x1,y1,x2,y2 : integer);
begin
  ClipX1:=x1;
  ClipY1:=y1;
  ClipX2:=x2;
  ClipY2:=y2;
end;


procedure PutSprite(Buffer: pointer; x,y,largeur,hauteur: integer; sprite: Pbyte);
assembler;
asm
  push ds
  lds si,sprite
  les di,buffer
  mov ax,0140h
  mul y
  add ax,x
  add di,ax
  mov bx,0140h
  sub bx,largeur
  mov dx,hauteur
 @Boucle_PutSpriteY:
  mov cx,largeur
 @Boucle_PutSpriteX:
  mov al,[SI]
  cmp al,0
  jz @Sauter_ce_pixel
  mov es:[DI],al
 @Sauter_ce_pixel:
  inc si
  inc di
  dec cx
  jnz @Boucle_PutSpriteX
  add di,bx
  dec dx
  jnz @Boucle_PutSpriteY
  pop ds
end;


procedure PutSpriteClip(Buffer: pointer; x,y,largeur,hauteur: integer; sprite: Pbyte);
var
  deltaX1,deltaX2,deltaY1,deltaY2: integer;
  ancienne_largeur: integer;
begin
	asm
	  mov bx,largeur
	  mov ancienne_largeur,bx
	  mov ax,x
	  add bx,ax
	  mov cx,y
	  mov dx,cx
	  add dx,hauteur
	  cmp ax,ClipX2
	  jg @fin
	  cmp bx,ClipX1
	  jl @fin
	  cmp cx,ClipY2
	  jg @fin
	  cmp dx,ClipY1
	  jl @fin
	  xor si,si
	  mov deltaX1,si
	  mov deltaX2,si
	  mov deltaY1,si
	  mov deltaY2,si
	  cmp ax,ClipX1
	  jge @suite1
	  mov si,ClipX1
	  mov x,si
	  sub si,ax
	  mov DeltaX1,si
	  sub largeur,si
	  mov ax,x
	  mov bx,ax
	  add bx,largeur
	 @suite1:
	  cmp bx,ClipX2
	  jle @suite2
	  mov si,bx
	  sub si,ClipX2
	  mov DeltaX2,si
	  sub largeur,si
	 @suite2:
	  cmp cx,ClipY1
	  jge @suite3
	  mov si,ClipY1
	  mov y,si
	  sub si,cx
 	  mov DeltaY1,si
 	  sub hauteur,si
 	  mov cx,y
		mov dx,cx
		add dx,hauteur
	 @suite3:
	  cmp dx,ClipY2
	  jle @suite4
	  mov si,dx
	  sub si,ClipY2
	  mov DeltaY2,si
	  sub hauteur,si
	 @suite4:
	  push ds
	  lds si,sprite
	  les di,buffer
	  mov ax,ancienne_largeur
	  mul deltaY1
 	  add si,ax
 	  mov ax,320
 	  mul y
 	  add ax,x
 	  add di,ax
 	  mov bx,320
 	  sub bx,largeur
 	  mov dx,hauteur
	 @Boucle_PutSpriteY:
  	mov cx,largeur
	  add si,deltaX1
	 @Boucle_PutSpriteX:
	  mov al,[SI]
	  cmp al,0
	  jz @Sauter_ce_pixel
	  mov es:[DI], al
	 @Sauter_ce_pixel:
	  inc si
	  inc di
	  dec cx
	  jnz @Boucle_PutSpriteX
	  add di,bx
 	  add si,deltaX2
 	  dec dx
 	  jnz @Boucle_PutSpriteY
 	  pop ds
	 @fin:
	end;
end;


procedure AffSprite(x,y,largeur,hauteur: integer; sprite: Pbyte);
assembler;
asm
  push ds
  lds si,sprite
  mov ax,0A000h
  mov es,ax
  mov ax,y
  shl ax,6
  mov bx,ax
  shl ax,2
  add ax,bx
  add ax,x
  mov di,ax
  mov bx,0140h
  sub bx,largeur
  mov dx,hauteur
 @Boucle_PutSpriteY:
  mov cx,largeur
 @Boucle_PutSpriteX:
  mov al,[SI]
  cmp al,00h
  jz @Sauter_ce_pixel
  mov es:[DI],al
 @Sauter_ce_pixel:
  inc si
  inc di
	dec cx
  jnz @Boucle_PutSpriteX
  add di,bx
  dec dx
  jnz @Boucle_PutSpriteY
  pop ds
end;


procedure FondSprite(x1,y1,largeur,hauteur: integer; sprite: Pbyte);
assembler;
asm
	push ds
	mov  ax,0A000h
	mov  ds,ax
	les  di,sprite
	mov  ax,0140h
	mul  y1
	add  ax,x1
	mov  si,ax
	mov  bx,0140h
	sub  bx,largeur
	mov  dx,hauteur
 @BoucleHauteur:
	mov  cx,largeur
	rep  movsb
	add  si,bx
	dec  dx
	jnz @BoucleHauteur
	pop  ds
end;


procedure BoxPerso(BPx,BClr: byte);
begin
	V_LineMCGA(11+BPx*80,48,144,BClr);
	V_LineMCGA(11+BPx*80+56,48,144,BClr);
	H_LineMCGA(11+BPx*80,48,11+BPx*80+56,BClr);
	H_LineMCGA(11+BPx*80,144,11+BPx*80+56,BClr);
end;


procedure ChoixPerso(var Chx: Hero);
begin
(********************************   F O N D   *******************************)
	ChargePCX('fond.pcx',ImF,Pal);
	SetPalette(Pal);
	PCX320x200(Imf);
	freemem(ImF,64000);
(***********************   S P R I T E   P L A Y E R   **********************)
	ChargePCX('4perso.pcx',ImPerso,Pal);
	GetMem(Titre,830);
	GetMem(Perso1,4929);
  GetMem(Perso2,4929);
  GetMem(Perso3,4929);
  GetMem(Perso4,4929);
	GetSprite(ImPerso,212,0,83,10,Titre);
  GetSprite(ImPerso,0,0,53,93,Perso1);
	GetSprite(ImPerso,53,0,53,93,Perso2);
  GetSprite(ImPerso,106,0,53,93,Perso3);
  GetSprite(ImPerso,159,0,53,93,Perso4);
	AffSprite(120,20,83,10,Titre);
  AffSprite(13,50,53,93,Perso1);
  AffSprite(93,50,53,93,Perso2);
  AffSprite(173,50,53,93,Perso3);
  AffSprite(253,50,53,93,Perso4);
  FreeMem(Titre,830);
  FreeMem(Perso1,4929);
  FreeMem(Perso2,4929);
  FreeMem(Perso3,4929);
  FreeMem(Perso4,4929);
  FreeMem(ImPerso,64000);
(************************   S E L E C T   P L A Y E R   *********************)
	Rest:=true;
  Chx:=random(4);
  BoxPerso(Chx,100);
	while Rest do begin
		If keypress then begin
      delay(100);
			if Tabkey[GAUCHE] then begin
			  BoxPerso(Chx,0);
        if Chx>0 then
        	dec(Chx)
        else
        	Chx:=3;
      end
      else if TabKey[DROITE] then begin
			  BoxPerso(Chx,0);
        if Chx<3 then
					inc(Chx)
        else
        	Chx:=0;
      end
			else if TabKey[ENTER] then
				Rest:=false
			else if TabKey[ESC] then
				Rest:=false;
		  BoxPerso(Chx,100);
		end;
	end;
end;


procedure Plan;
begin
  EffaceBuffer(EcranVirtuel,0);
	for a:=10 downto -10 do begin
		for b:=10-abs(a) downto abs(a)-10 do begin
			if ((PtX+a in [1..LevelLarg]) and (PtY+b in [1..LevelHaut]) and (LEVEL1[PtX+a,PtY+b] in [1..99])) then
			  AffSprite(146+14*a-14*b,94-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Decort[LEVEL1[PtX+a,PtY+b]])
			else if ((PtX+a in [1..LevelLarg]) and (PtY+b in [1..LevelHaut]) and (LEVEL1[PtX+a,PtY+b] in [100..199])) then begin
			  AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Decort[LEVEL1[PtX+a,PtY+b]]);
			  AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Decort[LEVEL1[PtX+a,PtY+b]+1]);
			  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Decort[5]);
			end;
			if ((PtX+a=H0X) and (PtY+b=H0Y)) then
				AffSprite(153+14*a-14*b,80-7*a-7*b,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[0,random(8)])
			else if ((PtX+a=H1X) and (PtY+b=H1Y)) then
				AffSprite(153+14*a-14*b,80-7*a-7*b,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,random(8)]);
(*
			if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (FLOOR1[PtX+a,PtY+b]=1)) then
			  AffSprite(146+14*a-14*b,94-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol0)
			else if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (FLOOR1[PtX+a,PtY+b]=2)) then
			  AffSprite(146+14*a-14*b,94-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol1)
			else if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (FLOOR1[PtX+a,PtY+b]=3)) then
			  AffSprite(146+14*a-14*b,94-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2)
			else if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (FLOOR1[PtX+a,PtY+b]=4)) then
			  AffSprite(146+14*a-14*b,94-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol3);
			if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (WALL1[PtX+a,PtY+b]=3)) then
        if ((abs(a)+abs(b)=10) or (PtX+a=1) or (PtY+b=1)) then begin
					AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur1G);
				  AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur1D);
				  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
        end
        else
					if ((WALL1[PtX+a,PtY+b-1]=3) and (WALL1[PtX+a-1,PtY+b]=1)) then
					  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2)
					else if (WALL1[PtX+a,PtY+b-1]=3) then begin
					  AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur1G);
					  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
          end
					else if (WALL1[PtX+a-1,PtY+b]=3) then begin
					  AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur1D);
					  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
          end
 	        else begin
					  AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur1G);
					  AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur1D);
					  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
          end
			else if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (WALL1[PtX+a,PtY+b]=5)) then
        if ((abs(a)+abs(b)=10) or (PtX+a=1) or (PtY+b=1)) then begin
				  AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur2G);
				  AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur2D);
				  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
        end
        else
					if ((WALL1[PtX+a,PtY+b-1]=3) and (WALL1[PtX+a-1,PtY+b]=1)) then
					  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2)
					else if (WALL1[PtX+a,PtY+b-1]=3) then begin
					  AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur2G);
					  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
          end
					else if (WALL1[PtX+a-1,PtY+b]=3) then begin
					  AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur2D);
					  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
          end
 	        else begin
					  AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur2G);
					  AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur2D);
					  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
          end
			else if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (WALL1[PtX+a,PtY+b]=4)) then
        if ((abs(a)+abs(b)=10) or (PtX+a=1) or (PtY+b=1)) then begin
				  AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur0G);
					AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur0D);
				  AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
        end
        else
					if ((WALL1[PtX+a,PtY+b-1]=3) and (WALL1[PtX+a-1,PtY+b]=4)) then
						AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2)
					else if (WALL1[PtX+a,PtY+b-1]=3) then begin
						AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur0G);
						AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
					end
					else if (WALL1[PtX+a-1,PtY+b]=3) then begin
						AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur0D);
						AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
					end
					else begin
						AffSprite(146+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur0G);
						AffSprite(146+14+14*a-14*b,77-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur0D);
						AffSprite(146+14*a-14*b,70-7*b-7*a,SolSpr_LARG,SolSpr_HAUT,Sol2);
					end
			else if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (WALL1[PtX+a,PtY+b]=2)) then begin
				AffSprite(146+14+14*a-14*b,77-7-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur5G);
			end
			else if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (WALL1[PtX+a,PtY+b]=1)) then begin
				AffSprite(146+14*a-14*b,77-7-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,Mur5D);
			end
			else if ((PtX+a in [1..TAILLE]) and (PtY+b in [1..TAILLE]) and (WALL1[PtX+a,PtY+b]=10)) then begin
				AffSprite(153+14*a-14*b,80-7*a-7*b,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[1,5]);
			end;
*)
			if ((a=0) and (b=0)) then begin
				FondSprite(153,80,HeroSpr_LARG,HeroSpr_HAUT,Fond);
				AffSprite(153,80,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[ChxHero,Direct]);
			end;
    CopieBuffer(EcranVirtuel);
    Vsync;
		end;
	end;
end;


begin
	InitMode($13);
	InitNewKeyb;
	randomize;
  SetClipZone(0,0,319,199);
	ChoixPerso(ChxHero);
	CreerImageSprite;
	getmem(Fond,HeroSpr_LARG*HeroSpr_HAUT);
  getmem(EcranVirtuel,64000);
	for i:=1 to LevelLarg do
		for j:=1 to LevelHaut do
			LEVEL1[i][j]:=6;
	for i:=1 to 100 do begin
		LEVEL1[2+random(20)][2+random(20)]:=1;
		LEVEL1[2+random(20)][2+random(20)]:=1;
		LEVEL1[2+random(20)][2+random(20)]:=1;
		LEVEL1[2+random(20)][2+random(20)]:=1;
		LEVEL1[2+random(25)][2+random(25)]:=1;
		LEVEL1[2+random(98)][2+random(98)]:=1;
		LEVEL1[2+random(98)][2+random(98)]:=2;
		LEVEL1[2+random(98)][2+random(98)]:=3;
		LEVEL1[2+random(98)][2+random(98)]:=4;
		LEVEL1[2+random(98)][2+random(98)]:=5;
		LEVEL1[2+random(98)][2+random(98)]:=6;
		LEVEL1[2+random(98)][2+random(98)]:=104;
		LEVEL1[2+random(98)][2+random(98)]:=104;
		LEVEL1[2+random(98)][2+random(98)]:=104;
		LEVEL1[2+random(98)][2+random(98)]:=104;
		LEVEL1[2+random(98)][2+random(98)]:=104;
	end;
  repeat
		PtX:=2+random(98);
		PtY:=2+random(98);
  until LEVEL1[PtX][PtY]<100;
  repeat
		H0X:=2+random(98);
		H0Y:=2+random(98);
  until LEVEL1[H0X][H0Y]<100;
  repeat
		H1X:=2+random(98);
		H1Y:=2+random(98);
  until LEVEL1[H1X][H1Y]<100;
	Direct:=random(8);
	Plan;
	Rest:=true;
	while Rest do begin
		If keypress then begin
      delay(50);
			if TabKey[HG] then begin
        if Direct>0 then
        	dec(Direct)
        else
        	Direct:=7;
			  AffSprite(153,80,HeroSpr_LARG,HeroSpr_HAUT,Fond);
			  AffSprite(153,80,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[ChxHero,Direct]);
      end
			else if TabKey[HD] then begin
        if Direct<7 then
        	inc(Direct)
        else
        	Direct:=0;
			  AffSprite(153,80,HeroSpr_LARG,HeroSpr_HAUT,Fond);
			  AffSprite(153,80,HeroSpr_LARG,HeroSpr_HAUT,SpySprt[ChxHero,Direct]);
      end
      else if TabKey[HAUT] then begin
        if Direct=0 then begin
	      	if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
    	  	if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
          Plan;
        end
				else if Direct=1 then begin
	      	if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
          Plan;
        end
        else if Direct=2 then begin
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
          Plan;
        end
				else if Direct=3 then begin
	      	if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
          plan;
				end
        else if Direct=4 then begin
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
          Plan;
        end
        else if Direct=5 then begin
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
          plan;
        end
        else if Direct=6 then begin
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
          Plan;
        end
        else if Direct=7 then begin
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
          Plan;
				end;
			end
			else if TabKey[GAUCHE] then begin
				if Direct=0 then begin
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
    	  	if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
          Plan;
        end
        else if Direct=1 then begin
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					Plan;
        end
        else if Direct=2 then begin
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					Plan;
				end
				else if Direct=3 then begin
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					plan;
				end
				else if Direct=4 then begin
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					Plan;
				end
				else if Direct=5 then begin
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					plan;
				end
				else if Direct=6 then begin
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					Plan;
				end
				else if Direct=7 then begin
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					Plan;
				end;
			end
			else if TabKey[DROITE] then begin
				if Direct=0 then begin
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					Plan;
        end
        else if Direct=1 then begin
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					Plan;
				end
				else if Direct=2 then begin
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					Plan;
				end
				else if Direct=3 then begin
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					plan;
				end
				else if Direct=4 then begin
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					Plan;
				end
				else if Direct=5 then begin
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					plan;
				end
				else if Direct=6 then begin
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					Plan;
				end
				else if Direct=7 then begin
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					Plan;
				end;
			end
			else if TabKey[CENTRE] then begin
				if Direct=0 then begin
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					Plan;
				end
				else if Direct=1 then begin
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					Plan;
				end
				else if Direct=2 then begin
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					if ((PtX>1) and (LEVEL1[PtX-1][PtY] in [0..99])) then
						dec(PtX);
					Plan;
				end
				else if Direct=3 then begin
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					plan;
				end
				else if Direct=4 then begin
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					if ((PtY<LevelHaut) and (LEVEL1[PtX][PtY+1] in [0..99])) then
						inc(PtY);
					Plan;
				end
				else if Direct=5 then begin
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					plan;
				end
				else if Direct=6 then begin
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					if ((PtX<LevelLarg) and (LEVEL1[PtX+1][PtY] in [0..99])) then
						inc(PtX);
					Plan;
				end
				else if Direct=7 then begin
					if ((PtY>1) and (LEVEL1[PtX][PtY-1] in [0..99])) then
						dec(PtY);
					Plan;
				end;
			end
			else if TabKey[ESC] then
				Rest:=false;
		end;
	end;
  for i:=1 to 3 do
  	for j:=0 to 7 do
      freemem(SpySprt[i,j],HeroSpr_LARG*HeroSpr_HAUT);
  for i:=1 to 10 do
    freemem(Decort[i],SolSpr_LARG*SolSpr_HAUT);
 	for i:=100 to 113 do
	  getmem(Decort[i],MurSpr_LARG*MurSpr_HAUT);
	freemem(Fond,HeroSpr_LARG*HeroSpr_HAUT);
  freemem(EcranVirtuel,64000);
	InitMode($3);
	InitOldKeyb;
end.