{$G+}
{$E+}
{$F+}


uses crt,GraphAsm,_KeybAsm;


const
  HeroL=14;
  HeroH=22;
  SolL=28;
  SolH=13;
  MurSpr_LARG=14;
  MurSpr_HAUT=30;
  LevelLarg=100;
  LevelHaut=100;
  C1X=80;
  C1Y=100;
  C2X=240;
  C2Y=100;

  LEVEL1: array [1..LevelLarg,1..LevelHaut] of word=
  ((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,1,1,1,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,1,100,1,0,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,1,1,1,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,6,6,6,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,6,6,6,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,6,6,6,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,6,6,6,6,6,6,6,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
	 (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
   (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));


type
  Hero= 0..3;
  Position=record
    X,Y: word;
  end;
	Direction= 0..7;
  PJ=record
	  Spy: Hero;
    Pos: Position;
    Dir: Direction;
  end;
var
	Decort: array [1..255] of PByte;
	SpySprt: array [0..3,0..7] of PByte;
	Tmp,ImF,Fond,Titre,ImPerso,Perso1,Perso2,Perso3,perso4: PByte;
  EcranVirtuel: PByte;
	H0X,H0Y,H1X,H1Y,ChxPersp,i,j,k,Color: byte;
	a,b,c,d: integer;
	Rest: boolean;
	Pal: TPalette;
  PLY1,PLY2: Pj;

procedure CreerImageSprite;
var
	image: Pbyte;
	palette: TPalette;
begin
(************************   I N I T   P E R S O   ***************************)
	ChargePCX('spywar.drw',image,palette);
  for i:=0 to 3 do
  	for j:=0 to 7 do
	    GetMem(SpySprt[i,j],HeroL*HeroH);
  GetSprite(image,001,25,HeroL,HeroH,SpySprt[0,0]);
  GetSprite(image,016,25,HeroL,HeroH,SpySprt[0,1]);
  GetSprite(image,031,25,HeroL,HeroH,SpySprt[0,2]);
  GetSprite(image,046,25,HeroL,HeroH,SpySprt[0,3]);
  GetSprite(image,061,25,HeroL,HeroH,SpySprt[0,4]);
  GetSprite(image,076,25,HeroL,HeroH,SpySprt[0,5]);
  GetSprite(image,091,25,HeroL,HeroH,SpySprt[0,6]);
  GetSprite(image,106,25,HeroL,HeroH,SpySprt[0,7]);
  GetSprite(image,001,01,HeroL,HeroH,SpySprt[1,0]);
  GetSprite(image,016,01,HeroL,HeroH,SpySprt[1,1]);
  GetSprite(image,031,01,HeroL,HeroH,SpySprt[1,2]);
  GetSprite(image,046,01,HeroL,HeroH,SpySprt[1,3]);
  GetSprite(image,061,01,HeroL,HeroH,SpySprt[1,4]);
  GetSprite(image,076,01,HeroL,HeroH,SpySprt[1,5]);
  GetSprite(image,091,01,HeroL,HeroH,SpySprt[1,6]);
  GetSprite(image,106,01,HeroL,HeroH,SpySprt[1,7]);
  freemem(image,64000);

(*************************   I N I T   D E C O   ****************************)
  ChargePCX('decors01.pcx',image,palette);
 	for i:=1 to 10 do
    GetMem(Decort[i],SolL*SolH);
  GetSprite(image,1,33,SolL,SolH,Decort[1]);
  GetSprite(image,31,33,SolL,SolH,Decort[2]);
  GetSprite(image,61,33,SolL,SolH,Decort[3]);
	GetSprite(image,91,33,SolL,SolH,Decort[4]);
	GetSprite(image,121,33,SolL,SolH,Decort[5]);
	GetSprite(image,151,33,SolL,SolH,Decort[6]);
	GetSprite(image,31,48,SolL,SolH,Decort[7]);
	GetSprite(image,61,48,SolL,SolH,Decort[8]);
	GetSprite(image,91,48,SolL,SolH,Decort[9]);

 	for i:=100 to 113 do
	  GetMem(Decort[i],MurSpr_LARG*MurSpr_HAUT);
  GetSprite(image,001,1,MurSpr_LARG,MurSpr_HAUT,Decort[100]);
  GetSprite(image,209,1,MurSpr_LARG,MurSpr_HAUT,Decort[101]);
  GetSprite(image,017,1,MurSpr_LARG,MurSpr_HAUT,Decort[102]);
  GetSprite(image,193,1,MurSpr_LARG,MurSpr_HAUT,Decort[103]);
  GetSprite(image,033,1,MurSpr_LARG,MurSpr_HAUT,Decort[104]);
  GetSprite(image,177,1,MurSpr_LARG,MurSpr_HAUT,Decort[105]);
  GetSprite(image,049,1,MurSpr_LARG,MurSpr_HAUT,Decort[106]);
  GetSprite(image,161,1,MurSpr_LARG,MurSpr_HAUT,Decort[107]);
  GetSprite(image,065,1,MurSpr_LARG,MurSpr_HAUT,Decort[108]);
  GetSprite(image,145,1,MurSpr_LARG,MurSpr_HAUT,Decort[109]);
  GetSprite(image,081,1,MurSpr_LARG,MurSpr_HAUT,Decort[110]);
  GetSprite(image,129,1,MurSpr_LARG,MurSpr_HAUT,Decort[111]);
  GetSprite(image,097,1,MurSpr_LARG,MurSpr_HAUT,Decort[112]);
  GetSprite(image,113,1,MurSpr_LARG,MurSpr_HAUT,Decort[113]);
  freemem(image,64000);
end;


procedure AffSprite(x,y,largeur,hauteur: integer; sprite: Pbyte);
assembler;
asm
  push ds
  lds si,sprite
  mov ax,0A000h
  mov es,ax
  mov ax,y
  shl ax,6
  mov bx,ax
  shl ax,2
  add ax,bx
  add ax,x
  mov di,ax
  mov bx,0140h
  sub bx,largeur
  mov dx,hauteur
 @Boucle_PutSpriteY:
  mov cx,largeur
 @Boucle_PutSpriteX:
  mov al,[SI]
  cmp al,00h
  jz @Sauter_ce_pixel
  mov es:[DI],al
 @Sauter_ce_pixel:
  inc si
  inc di
	dec cx
  jnz @Boucle_PutSpriteX
  add di,bx
  dec dx
  jnz @Boucle_PutSpriteY
  pop ds
end;


procedure FondSprite(x1,y1,largeur,hauteur: integer; sprite: Pbyte);
assembler;
asm
	push ds
	mov  ax,0A000h
	mov  ds,ax
	les  di,sprite
	mov  ax,0140h
	mul  y1
	add  ax,x1
	mov  si,ax
	mov  bx,0140h
	sub  bx,largeur
	mov  dx,hauteur
 @BoucleHauteur:
	mov  cx,largeur
	rep  movsb
	add  si,bx
	dec  dx
	jnz @BoucleHauteur
	pop  ds
end;


procedure BoxPerso(BPx,BClr: byte);
begin
	V_LineMCGA(12+BPx*80,49,143,BClr);
	V_LineMCGA(66+BPx*80,49,143,BClr);
	H_LineMCGA(12+BPx*80,49,66+BPx*80,BClr);
	H_LineMCGA(12+BPx*80,143,66+BPx*80,BClr);
end;


procedure ChoixPerso(var Chx: Hero);
begin
(********************************   F O N D   *******************************)
	ChargePCX('fond.pcx',ImF,Pal);
	SetPalette(Pal);
	PCX320x200(Imf);
	freemem(ImF,64000);
(***********************   S P R I T E   P L A Y E R   **********************)
	ChargePCX('4perso.pcx',ImPerso,Pal);
	GetMem(Titre,830);
	GetMem(Perso1,4929);
  GetMem(Perso2,4929);
  GetMem(Perso3,4929);
  GetMem(Perso4,4929);
	GetSprite(ImPerso,212,0,83,10,Titre);
  GetSprite(ImPerso,0,0,53,93,Perso1);
	GetSprite(ImPerso,53,0,53,93,Perso2);
  GetSprite(ImPerso,106,0,53,93,Perso3);
  GetSprite(ImPerso,159,0,53,93,Perso4);
	AffSprite(120,20,83,10,Titre);
  AffSprite(13,50,53,93,Perso1);
  AffSprite(93,50,53,93,Perso2);
  AffSprite(173,50,53,93,Perso3);
  AffSprite(253,50,53,93,Perso4);
  FreeMem(Titre,830);
  FreeMem(Perso1,4929);
  FreeMem(Perso2,4929);
  FreeMem(Perso3,4929);
  FreeMem(Perso4,4929);
  FreeMem(ImPerso,64000);
(************************   S E L E C T   P L A Y E R   *********************)
	Rest:=true;
  BoxPerso(0,0);
  BoxPerso(1,0);
  BoxPerso(2,0);
  BoxPerso(3,0);
  Chx:=random(4);
  BoxPerso(Chx,100);
	while Rest do begin
		If keypress then begin
      delay(100);
			if Tabkey[GAUCHE] then begin
			  BoxPerso(Chx,0);
        if Chx>0 then
        	dec(Chx)
        else
        	Chx:=3;
      end
      else if TabKey[DROITE] then begin
			  BoxPerso(Chx,0);
        if Chx<3 then
					inc(Chx)
        else
        	Chx:=0;
      end
			else if TabKey[ENTER] then
				Rest:=false
			else if TabKey[ESC] then
				Rest:=false;
		  BoxPerso(Chx,100);
		end;
	end;
end;


procedure Plan;
begin
  EffaceBuffer(EcranVirtuel,0);
  d:=5;
  c:=3;
	for a:=10 downto -10 do begin
    if a in [4..10] then
    	inc(c)
    else
    	dec(c);
    if a+4 in [0..14] then
    	dec(d)
    else
    	inc(d);
		for b:=c downto d do begin
			if ((PLY1.POS.X+a in [1..LevelLarg]) and (PLY1.POS.Y+b in [1..LevelHaut]) and (LEVEL1[PLY1.POS.X+a,PLY1.POS.Y+b]
			   in [1..99])) then
			  PutSpriteClip(EcranVirtuel,C1X-14+14*a-14*b,C1Y-6-7*b-7*a,SolL,SolH,
				              Decort[LEVEL1[PLY1.POS.X+a,PLY1.POS.Y+b]])
			else if ((PLY1.POS.X+a in [1..LevelLarg]) and (PLY1.POS.Y+b in [1..LevelHaut]) and (LEVEL1[PLY1.POS.X+a,PLY1.POS.Y+b]
			        in [100..199])) then begin
			  PutSpriteClip(EcranVirtuel,C1X-14+14*a-14*b,C1Y-23-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,
											Decort[LEVEL1[PLY1.POS.X+a,PLY1.POS.Y+b]]);
			  PutSpriteClip(EcranVirtuel,C1X-14+14+14*a-14*b,C1Y-23-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,
				              Decort[LEVEL1[PLY1.POS.X+a,PLY1.POS.Y+b]+1]);
			  PutSpriteClip(EcranVirtuel,C1X-14+14*a-14*b,C1Y-30-7*b-7*a,SolL,SolH,Decort[5]);
			end;
			if ((PLY1.POS.X+a=PLY2.POS.X) and (PLY1.POS.Y+b=PLY2.POS.Y)) then
				PutSpriteClip(EcranVirtuel,C1X-7+14*a-14*b,C1Y-20-7*a-7*b,HeroL,HeroH,SpySprt[PLY2.SPY,PLY2.DIR]);
			if ((a=0) and (b=0)) then begin
				FondSprite(C1X-7,80,HeroL,HeroH,Fond);
				PutSpriteClip(EcranVirtuel,C1X-7,C1Y-20,HeroL,HeroH,SpySprt[PLY1.SPY,PLY1.DIR]);
			end;
		end;
	end;
  d:=5;
  c:=3;
	for a:=10 downto -10 do begin
    if a in [4..10] then
    	inc(c)
    else
    	dec(c);
    if a+4 in [0..14] then
    	dec(d)
    else
    	inc(d);
		for b:=c downto d do begin
			if ((PLY2.POS.X+a in [1..LevelLarg]) and (PLY2.POS.Y+b in [1..LevelHaut]) and (LEVEL1[PLY2.POS.X+a,PLY2.POS.Y+b]
			   in [1..99])) then
			  PutSpriteClip(EcranVirtuel,C2X-14+14*a-14*b,C2Y-6-7*b-7*a,SolL,SolH,
				              Decort[LEVEL1[PLY2.POS.X+a,PLY2.POS.Y+b]])
			else if ((PLY2.POS.X+a in [1..LevelLarg]) and (PLY2.POS.Y+b in [1..LevelHaut]) and (LEVEL1[PLY2.POS.X+a,PLY2.POS.Y+b]
			        in [100..199])) then begin
			  PutSpriteClip(EcranVirtuel,C2X-14+14*a-14*b,C2Y-23-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,
											Decort[LEVEL1[PLY2.POS.X+a,PLY2.POS.Y+b]]);
			  PutSpriteClip(EcranVirtuel,C2X-14+14+14*a-14*b,C2Y-23-7*b-7*a,MurSpr_LARG,MurSpr_HAUT,
				              Decort[LEVEL1[PLY2.POS.X+a,PLY2.POS.Y+b]+1]);
			  PutSpriteClip(EcranVirtuel,C2X-14+14*a-14*b,C2Y-30-7*b-7*a,SolL,SolH,Decort[5]);
			end;
			if ((PLY2.POS.X+a=PLY1.POS.X) and (PLY2.POS.Y+b=PLY1.POS.Y)) then
				PutSpriteClip(EcranVirtuel,C2X-7+14*a-14*b,C2Y-20-7*a-7*b,HeroL,HeroH,SpySprt[PLY1.SPY,PLY1.DIR]);
			if ((a=0) and (b=0)) then begin
				FondSprite(C2X-7,80,HeroL,HeroH,Fond);
				PutSpriteClip(EcranVirtuel,C2X-7,C2Y-20,HeroL,HeroH,SpySprt[PLY2.SPY,PLY2.DIR]);
			end;
		end;
	end;
  CopieBuffer(EcranVirtuel);
  Vsync;
end;


begin
	InitMode($13);
	InitNewKeyb;
	randomize;
  SetClipZone(0,0,320,200);
	ChoixPerso(PLY1.SPY);
	CreerImageSprite;
	getmem(Fond,HeroL*HeroH);
  getmem(EcranVirtuel,64000);
	for i:=1 to LevelLarg do
		for j:=1 to LevelHaut do
			LEVEL1[i][j]:=4;
	for i:=1 to 100 do begin
		LEVEL1[2+random(20)][2+random(20)]:=1;
		LEVEL1[2+random(20)][2+random(20)]:=1;
		LEVEL1[2+random(20)][2+random(20)]:=1;
		LEVEL1[2+random(20)][2+random(20)]:=1;
		LEVEL1[2+random(25)][2+random(25)]:=1;
		LEVEL1[2+random(98)][2+random(98)]:=1;
		LEVEL1[2+random(98)][2+random(98)]:=2;
		LEVEL1[2+random(98)][2+random(98)]:=3;
		LEVEL1[2+random(98)][2+random(98)]:=4;
		LEVEL1[2+random(98)][2+random(98)]:=5;
		LEVEL1[2+random(98)][2+random(98)]:=6;
		LEVEL1[2+random(98)][2+random(98)]:=7;
		LEVEL1[2+random(98)][2+random(98)]:=8;
		LEVEL1[2+random(98)][2+random(98)]:=9;
		LEVEL1[2+random(98)][2+random(98)]:=104;
		LEVEL1[2+random(98)][2+random(98)]:=104;
		LEVEL1[2+random(98)][2+random(98)]:=104;
		LEVEL1[2+random(98)][2+random(98)]:=104;
		LEVEL1[2+random(98)][2+random(98)]:=104;
	end;
  repeat
		PLY1.POS.X:=2+random(98);
		PLY1.POS.Y:=2+random(98);
  until LEVEL1[PLY1.POS.X][PLY1.POS.Y]<100;
	PLY1.DIR:=random(8);
  PLY2.SPY:=random(2);
  repeat
		PLY2.POS.X:=2+random(98);
		PLY2.POS.Y:=2+random(98);
  until LEVEL1[PLY2.POS.X][PLY2.POS.Y]<100;
	PLY2.DIR:=random(8);
	Plan;
	Rest:=true;
	while Rest do begin
		If keypress then begin
      delay(50);
			if TabKey[HG] then begin
        if PLY1.DIR>0 then
        	dec(PLY1.DIR)
        else
        	PLY1.DIR:=7;
        Plan;
      end
			else if TabKey[HD] then begin
        if PLY1.DIR<7 then
        	inc(PLY1.DIR)
        else
        	PLY1.DIR:=0;
        Plan;
      end
      else if TabKey[HAUT] then begin
        if PLY1.DIR=0 then begin
	      	if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
    	  	if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
          Plan;
        end
				else if PLY1.DIR=1 then begin
	      	if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
          Plan;
        end
        else if PLY1.DIR=2 then begin
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
          Plan;
        end
				else if PLY1.DIR=3 then begin
	      	if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
          plan;
				end
        else if PLY1.DIR=4 then begin
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
          Plan;
        end
        else if PLY1.DIR=5 then begin
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
          plan;
        end
        else if PLY1.DIR=6 then begin
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
          Plan;
        end
        else if PLY1.DIR=7 then begin
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
          Plan;
				end;
			end
			else if TabKey[GAUCHE] then begin
				if PLY1.DIR=0 then begin
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
    	  	if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
          Plan;
        end
        else if PLY1.DIR=1 then begin
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					Plan;
        end
        else if PLY1.DIR=2 then begin
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					Plan;
				end
				else if PLY1.DIR=3 then begin
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					plan;
				end
				else if PLY1.DIR=4 then begin
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					Plan;
				end
				else if PLY1.DIR=5 then begin
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					plan;
				end
				else if PLY1.DIR=6 then begin
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					Plan;
				end
				else if PLY1.DIR=7 then begin
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					Plan;
				end;
			end
			else if TabKey[DROITE] then begin
				if PLY1.DIR=0 then begin
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					Plan;
        end
        else if PLY1.DIR=1 then begin
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					Plan;
				end
				else if PLY1.DIR=2 then begin
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					Plan;
				end
				else if PLY1.DIR=3 then begin
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					plan;
				end
				else if PLY1.DIR=4 then begin
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					Plan;
				end
				else if PLY1.DIR=5 then begin
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					plan;
				end
				else if PLY1.DIR=6 then begin
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					Plan;
				end
				else if PLY1.DIR=7 then begin
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					Plan;
				end;
			end
			else if TabKey[CENTRE] then begin
				if PLY1.DIR=0 then begin
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					Plan;
				end
				else if PLY1.DIR=1 then begin
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					Plan;
				end
				else if PLY1.DIR=2 then begin
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					if ((PLY1.POS.X>1) and (LEVEL1[PLY1.POS.X-1][PLY1.POS.Y] in [0..99])) then
						dec(PLY1.POS.X);
					Plan;
				end
				else if PLY1.DIR=3 then begin
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					plan;
				end
				else if PLY1.DIR=4 then begin
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					if ((PLY1.POS.Y<LevelHaut) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y+1] in [0..99])) then
						inc(PLY1.POS.Y);
					Plan;
				end
				else if PLY1.DIR=5 then begin
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					plan;
				end
				else if PLY1.DIR=6 then begin
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					if ((PLY1.POS.X<LevelLarg) and (LEVEL1[PLY1.POS.X+1][PLY1.POS.Y] in [0..99])) then
						inc(PLY1.POS.X);
					Plan;
				end
				else if PLY1.DIR=7 then begin
					if ((PLY1.POS.Y>1) and (LEVEL1[PLY1.POS.X][PLY1.POS.Y-1] in [0..99])) then
						dec(PLY1.POS.Y);
					Plan;
				end;
			end
			else if TabKey[ENTER] then begin
        if PLY1.DIR=0 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY1.POS.X+i][PLY1.POS.Y+i] in [100..199]) then begin
              LEVEL1[PLY1.POS.X+i][PLY1.POS.Y+i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
				else if PLY1.DIR=1 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY1.POS.X+i][PLY1.POS.Y] in [100..199]) then begin
              LEVEL1[PLY1.POS.X+i][PLY1.POS.Y]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
        else if PLY1.DIR=2 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY1.POS.X+i][PLY1.POS.Y-i] in [100..199]) then begin
              LEVEL1[PLY1.POS.X+i][PLY1.POS.Y-i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
				else if PLY1.DIR=3 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY1.POS.X][PLY1.POS.Y-i] in [100..199]) then begin
              LEVEL1[PLY1.POS.X][PLY1.POS.Y-i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
				end
        else if PLY1.DIR=4 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY1.POS.X-i][PLY1.POS.Y-i] in [100..199]) then begin
              LEVEL1[PLY1.POS.X-i][PLY1.POS.Y-i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
        else if PLY1.DIR=5 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY1.POS.X-i][PLY1.POS.Y] in [100..199]) then begin
              LEVEL1[PLY1.POS.X-i][PLY1.POS.Y]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
        else if PLY1.DIR=6 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY1.POS.X-i][PLY1.POS.Y+i] in [100..199]) then begin
              LEVEL1[PLY1.POS.X-i][PLY1.POS.Y+i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
        else if PLY1.DIR=7 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY1.POS.X][PLY1.POS.Y+i] in [100..199]) then begin
              LEVEL1[PLY1.POS.X][PLY1.POS.Y+i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
				end;
			end
(*PLY2*)
			else if TabKey[16] then begin
        if PLY2.DIR>0 then
        	dec(PLY2.DIR)
        else
        	PLY2.DIR:=7;
        Plan;
      end
			else if TabKey[18] then begin
        if PLY2.DIR<7 then
        	inc(PLY2.DIR)
        else
        	PLY2.DIR:=0;
        Plan;
      end
      else if TabKey[17] then begin
        if PLY2.DIR=0 then begin
	      	if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
    	  	if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
          Plan;
        end
				else if PLY2.DIR=1 then begin
	      	if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
          Plan;
        end
        else if PLY2.DIR=2 then begin
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
          Plan;
        end
				else if PLY2.DIR=3 then begin
	      	if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
          plan;
				end
        else if PLY2.DIR=4 then begin
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
          Plan;
        end
        else if PLY2.DIR=5 then begin
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
          plan;
        end
        else if PLY2.DIR=6 then begin
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
          Plan;
        end
        else if PLY2.DIR=7 then begin
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
          Plan;
				end;
			end
			else if TabKey[30] then begin
				if PLY2.DIR=0 then begin
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
    	  	if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
          Plan;
        end
        else if PLY2.DIR=1 then begin
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					Plan;
        end
        else if PLY2.DIR=2 then begin
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					Plan;
				end
				else if PLY2.DIR=3 then begin
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					plan;
				end
				else if PLY2.DIR=4 then begin
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					Plan;
				end
				else if PLY2.DIR=5 then begin
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					plan;
				end
				else if PLY2.DIR=6 then begin
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					Plan;
				end
				else if PLY2.DIR=7 then begin
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					Plan;
				end;
			end
			else if TabKey[32] then begin
				if PLY2.DIR=0 then begin
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					Plan;
        end
        else if PLY2.DIR=1 then begin
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					Plan;
				end
				else if PLY2.DIR=2 then begin
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					Plan;
				end
				else if PLY2.DIR=3 then begin
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					plan;
				end
				else if PLY2.DIR=4 then begin
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					Plan;
				end
				else if PLY2.DIR=5 then begin
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					plan;
				end
				else if PLY2.DIR=6 then begin
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					Plan;
				end
				else if PLY2.DIR=7 then begin
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					Plan;
				end;
			end
			else if TabKey[31] then begin
				if PLY2.DIR=0 then begin
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					Plan;
				end
				else if PLY2.DIR=1 then begin
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					Plan;
				end
				else if PLY2.DIR=2 then begin
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					if ((PLY2.POS.X>1) and (LEVEL1[PLY2.POS.X-1][PLY2.POS.Y] in [0..99])) then
						dec(PLY2.POS.X);
					Plan;
				end
				else if PLY2.DIR=3 then begin
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					plan;
				end
				else if PLY2.DIR=4 then begin
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					if ((PLY2.POS.Y<LevelHaut) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y+1] in [0..99])) then
						inc(PLY2.POS.Y);
					Plan;
				end
				else if PLY2.DIR=5 then begin
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					plan;
				end
				else if PLY2.DIR=6 then begin
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					if ((PLY2.POS.X<LevelLarg) and (LEVEL1[PLY2.POS.X+1][PLY2.POS.Y] in [0..99])) then
						inc(PLY2.POS.X);
					Plan;
				end
				else if PLY2.DIR=7 then begin
					if ((PLY2.POS.Y>1) and (LEVEL1[PLY2.POS.X][PLY2.POS.Y-1] in [0..99])) then
						dec(PLY2.POS.Y);
					Plan;
				end;
			end
			else if TabKey[58] then begin
        if PLY2.DIR=0 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY2.POS.X+i][PLY2.POS.Y+i] in [100..199]) then begin
              LEVEL1[PLY2.POS.X+i][PLY2.POS.Y+i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
				else if PLY2.DIR=1 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY2.POS.X+i][PLY2.POS.Y] in [100..199]) then begin
              LEVEL1[PLY2.POS.X+i][PLY2.POS.Y]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
        else if PLY2.DIR=2 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY2.POS.X+i][PLY2.POS.Y-i] in [100..199]) then begin
              LEVEL1[PLY2.POS.X+i][PLY2.POS.Y-i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
				else if PLY2.DIR=3 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY2.POS.X][PLY2.POS.Y-i] in [100..199]) then begin
              LEVEL1[PLY2.POS.X][PLY2.POS.Y-i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
				end
        else if PLY2.DIR=4 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY2.POS.X-i][PLY2.POS.Y-i] in [100..199]) then begin
              LEVEL1[PLY2.POS.X-i][PLY2.POS.Y-i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
        else if PLY2.DIR=5 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY2.POS.X-i][PLY2.POS.Y] in [100..199]) then begin
              LEVEL1[PLY2.POS.X-i][PLY2.POS.Y]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
        else if PLY2.DIR=6 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY2.POS.X-i][PLY2.POS.Y+i] in [100..199]) then begin
              LEVEL1[PLY2.POS.X-i][PLY2.POS.Y+i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
        end
        else if PLY2.DIR=7 then begin
          i:=1;
          while i<11 do begin
		      	if (LEVEL1[PLY2.POS.X][PLY2.POS.Y+i] in [100..199]) then begin
              LEVEL1[PLY2.POS.X][PLY2.POS.Y+i]:=8;
              i:=11;
            end
            else
            	inc(i);
          end;
          Plan;
				end;
			end
			else if TabKey[ESC] then
				Rest:=false;
		end;
	end;
  for i:=1 to 3 do
  	for j:=0 to 7 do
      freemem(SpySprt[i,j],HeroL*HeroH);
  for i:=1 to 10 do
    freemem(Decort[i],SolL*SolH);
 	for i:=100 to 113 do
	  getmem(Decort[i],MurSpr_LARG*MurSpr_HAUT);
	freemem(Fond,HeroL*HeroH);
  freemem(EcranVirtuel,64000);
	InitMode($3);
	InitOldKeyb;
end.