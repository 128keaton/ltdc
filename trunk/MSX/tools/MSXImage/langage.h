#include <string>
#include "types.h"

/// Format of the data
enum DataFormat
{
	DATA_Decimal,
	DATA_Hexa,
	DATA_HexaC,      // 0x00, 0xD2, 0xFF
	DATA_HexaAsm,    // 00h, 0D2h, 0FFh
	DATA_HexaDollar, // $00, $D2, $FF
	DATA_HexaSharp,  // #00, #D2, #FF
	DATA_Binary,
};

/**
 * Langage interface
 */
class LangageInterface
{
protected:
	DataFormat eFormat;

public:
	LangageInterface(DataFormat format): eFormat(format) {}
	virtual std::string Header(const c8* version, const c8* name) = 0;
	virtual std::string SpriteBegin(i32 number) = 0;
	virtual std::string Line4Bytes(u8 minX, u8 minY, u8 sizeX, u8 sizeY, std::string comment) = 0;
	virtual std::string Line2Bytes(u8 minXY, u8 sizeXY, std::string comment) = 0;
	virtual std::string Line1Byte(u8 minSizeY, std::string comment) = 0;
	virtual std::string LineBegin() = 0;
	virtual std::string Data8Bits(u8 data) = 0;
	virtual std::string Data1Bit(u8 data) = 0;
	virtual std::string LineEnd() = 0;
	virtual std::string Footer(int totalBytes) = 0;
	virtual const c8* Format() = 0;
};

/**
 * C++ langage interface
 */
class LangageC: public LangageInterface
{
protected:
	#define BUFFER_SIZE 1024
	char strFormat[BUFFER_SIZE];
	char strData[BUFFER_SIZE];

public:
	LangageC(DataFormat format): LangageInterface(format) {}

	virtual const c8* Format()
	{
		switch(eFormat)
		{
		case DATA_Decimal:
			return "%3u";
		case DATA_Hexa:
		case DATA_HexaC:
		case DATA_HexaAsm:
		case DATA_HexaDollar:
		case DATA_HexaSharp:
			return "0x%02X";
		case DATA_Binary:
		default:
			return "0x%02X";
		}	
	}

	virtual std::string Header(const c8* version, const c8* name)
	{
		sprintf_s(strData, BUFFER_SIZE, 
			"// Sprite table generated by MSXImage %s\n"
			"const u8 %s[] =\n"
			"{\n", version, name);
		return strData; 
	}

	virtual std::string SpriteBegin(i32 number)
	{ 
		sprintf_s(strData, BUFFER_SIZE, 
			"// Sprite[%i]\n", number);
		return strData; 
	}

	virtual std::string Line4Bytes(u8 minX, u8 minY, u8 sizeX, u8 sizeY, std::string comment)
	{
		sprintf_s(strFormat, BUFFER_SIZE, 
			"\t%s, %s, %s, %s, // %s\n", Format(), Format(), Format(), Format(), comment.c_str());
		sprintf_s(strData, BUFFER_SIZE, strFormat, minX, minY, sizeX, sizeY);
		return strData; 
	}

	virtual std::string Line2Bytes(u8 minXY, u8 sizeXY, std::string comment)
	{
		sprintf_s(strFormat, BUFFER_SIZE, 
			"\t%s, %s, // %s\n", Format(), Format(), comment.c_str());
		sprintf_s(strData, BUFFER_SIZE, strFormat, minXY, sizeXY);
		return strData; 
	}

	virtual std::string Line1Byte(u8 minSizeY, std::string comment)
	{
		sprintf_s(strFormat, BUFFER_SIZE, 
			"\t%s, // %s\n", Format(), comment.c_str());
		sprintf_s(strData, BUFFER_SIZE, strFormat, minSizeY);
		return strData; 
	}

	virtual std::string LineBegin() { return "\t"; }

	virtual std::string Data8Bits(u8 data)
	{
		sprintf_s(strFormat, BUFFER_SIZE, "%s, ", Format());
		sprintf_s(strData, BUFFER_SIZE, strFormat, data);
		return strData; 
	}

	virtual std::string Data1Bit(u8 data)
	{
		sprintf_s(strFormat, BUFFER_SIZE, 
			"%s, /* %%c%%c%%c%%c%%c%%c%%c%%c */ ", Format());
		sprintf_s(strData, BUFFER_SIZE, strFormat, data, 
			data & 0x80 ? '#' : '.', 
			data & 0x40 ? '#' : '.', 
			data & 0x20 ? '#' : '.', 
			data & 0x10 ? '#' : '.', 
			data & 0x08 ? '#' : '.', 
			data & 0x04 ? '#' : '.', 
			data & 0x02 ? '#' : '.', 
			data & 0x01 ? '#' : '.');
		return strData; 
	}

	virtual std::string LineEnd() { return "\n"; }

	virtual std::string Footer(int totalBytes)
	{
		sprintf_s(strData, BUFFER_SIZE, 
			"};\n"
			"// Total size: %i bytes", totalBytes);
		return strData; 
	}

};


/**
 * C++ langage interface
 */
class LangageASM: public LangageInterface
{
protected:
	#define BUFFER_SIZE 1024
	char strFormat[BUFFER_SIZE];
	char strData[BUFFER_SIZE];

public:
	LangageASM(DataFormat format): LangageInterface(format) {}

	virtual const c8* Format()
	{
		switch(eFormat)
		{
		case DATA_Decimal:
			return "%3u";
		case DATA_HexaC:
			return "0x%02X";
		case DATA_HexaAsm:
			return "0%02Xh";
		case DATA_Hexa:
		case DATA_HexaDollar:
			return "$%02X";
		case DATA_HexaSharp:
			return "#%02X";
		case DATA_Binary:
		default:
			return "%3u";
		}	
	}

	virtual std::string Header(const c8* version, const c8* name)
	{
		sprintf_s(strData, BUFFER_SIZE, 
			"; Sprite table generated by MSXImage %s\n"
			"%s:\n", version, name);
		return strData; 
	}

	virtual std::string SpriteBegin(i32 number)
	{ 
		sprintf_s(strData, BUFFER_SIZE, 
			"; Sprite[%i]\n", number);
		return strData; 
	}

	virtual std::string Line4Bytes(u8 minX, u8 minY, u8 sizeX, u8 sizeY, std::string comment)
	{
		sprintf_s(strFormat, BUFFER_SIZE, 
			"\tdb %s %s %s %s ; %s\n", Format(), Format(), Format(), Format(), comment.c_str());
		sprintf_s(strData, BUFFER_SIZE, strFormat, minX, minY, sizeX, sizeY);
		return strData; 
	}

	virtual std::string Line2Bytes(u8 minXY, u8 sizeXY, std::string comment)
	{
		sprintf_s(strFormat, BUFFER_SIZE, 
			"\tdb %s %s ; %s\n", Format(), Format(), comment.c_str());
		sprintf_s(strData, BUFFER_SIZE, strFormat, minXY, sizeXY);
		return strData; 
	}

	virtual std::string Line1Byte(u8 minSizeY, std::string comment)
	{
		sprintf_s(strFormat, BUFFER_SIZE, 
			"\tdb %s ; %s\n", Format(), comment.c_str());
		sprintf_s(strData, BUFFER_SIZE, strFormat, minSizeY);
		return strData; 
	}

	virtual std::string LineBegin() { return "\tdb "; }

	virtual std::string Data8Bits(u8 data)
	{
		sprintf_s(strFormat, BUFFER_SIZE, "%s ", Format());
		sprintf_s(strData, BUFFER_SIZE, strFormat, data);
		return strData; 
	}

	virtual std::string Data1Bit(u8 data)
	{
		sprintf_s(strFormat, BUFFER_SIZE, "%s ", Format());
		sprintf_s(strData, BUFFER_SIZE, strFormat, data);
		return strData; 
	}

	virtual std::string LineEnd() { return "\n"; }

	virtual std::string Footer(int totalBytes)
	{
		sprintf_s(strData, BUFFER_SIZE, 
			"; Total size: %i bytes", totalBytes);
		return strData; 
	}

};
